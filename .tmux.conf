# set the terminal variable of tmux to screen-256color so vim will know that tmux support 256 colors
set -g default-terminal "screen-256color"

# fix escape lag for the sake of vim
set -s escape-time 0

# remap prefix from 'C-b' to 'C-Space'
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

# make shift+arrows, ctrl+arrows etc work in Vim
set -gw xterm-keys on

# titles & status bar
set -g set-titles         on    # set the terminal title
set -g status             on    # always show the status bar
set -g set-titles-string  "#W | #H"
set -g status-keys        vi
setw -g mode-keys vi
bind r command-prompt -I "" -p "rename window: " "rename-window %%" # r = rename window
# bind r command-prompt -I "#W" -p "rename window: " "rename-window %%" # r = rename window
# ask for title when creating a new window
bind c command-prompt -p "window name:" "new-window; rename-window %%"

# this is needed to have the event FocusGained work in vim
# set -g focus-events on

# set numbering of windows and panels to start from 1 instead than 0
set -g base-index 1
setw -g pane-base-index 1

# this maintains a "gapless" sequence of window numbers
set-option -g renumber-windows on

# rename windows automatically
setw -g automatic-rename off

# # show panel names
# set -g pane-border-status top
# set -g pane-border-format "#{pane_current_command}"

# split panes using Ctrl-Alt-... (-n allows to not use the prefix key) 
# bind -n C-M-v split-window -h -c "#{pane_current_path}"
# bind -n C-M-s split-window -v -c "#{pane_current_path}"

# zoom panel just using cttl-z (this also ovverrides the 'suspend' terminal command, which I never use)
bind-key -n C-z resize-pane -Z

# split windows using v and s
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"

# quit current panel
bind q confirm-before -p "quit panel running #{pane_current_command}? (y/n)" kill-pane

# kill current window
unbind x
bind k confirm-before -p "KILL window #W? (y/n)" kill-window

# move panel to target window
unbind m
bind m command-prompt -p "move panel to window:"  "join-pane -t :'%%'"

# # switch panes using Alt-arrow (not needed with vim-tmux-navigator)
# bind -n M-Left select-pane -L
# bind -n M-Right select-pane -R
# bind -n M-Up select-pane -U
# bind -n M-Down select-pane -D

# link panels
unbind l
bind l setw synchronize-panes\

# enable mouse mode (tmux 2.1 and above)
set -g mouse on

# set inactive/active window styles
set -g window-style 'fg=colour246,bg=black' # white is a bit greyer
set -g window-active-style 'fg=colour250,bg=black' # white is actually white (250)

# # to copy, left click and drag to highlight text. once you release, selection will automatically be available in system primary clipboard
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -i -sel primary"

# this command removes the RETURN at the end, but it does it for all lines!
# bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "cat | tr -d '\n'|  xclip -i -sel primary"

# middle click to paste from the clipboard (but only if we are not in vim, otherwise it acts weird!)
# checks if the command of the current panel is vim: if it is not, paste from system's primary buffer, if it is just send through the middleclik button to vim
bind -n MouseDown2Pane if -F '#{?#{m:*vim*,#{pane_current_command}},0,1}' 'run "xclip -o -sel primary | tmux load-buffer - ; tmux paste-buffer"' 'send -M'
# this simpler version (without check for vim) actualy works quite well if we are in vim insert mode
# bind -n MouseDown2Pane run "xclip -o -sel primary | tmux load-buffer - ; tmux paste-buffer"

# not needed anymore with the VimResized autocommand in vim!
# when a vim pane is zoomed, the vim splits will be automatically readapted to the new size
# bind z if -F '#{m:*vim*,#{pane_current_command}}' 'run "tmux resize-pane -Z ; sleep 0.05 ; tmux send-keys C-w = "' 'resize-pane -Z'

# bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
# bind -n WheelDownPane select-pane -t= \; send-keys -M

# drag to re-order windows
bind -n MouseDrag1Status swap-window -t=

# double click on the window list to open a new window
bind -n DoubleClick1Status new-window

# Smart pane switching with awareness of Vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
    bind -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
    bind -n C-Left if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
    bind -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
    bind -n C-Down if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
    bind -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
    bind -n C-Up if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
    bind -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
    bind -n C-Right if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
    # bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
    bind -T copy-mode-vi C-h select-pane -L
    bind -T copy-mode-vi C-Left select-pane -L
    bind -T copy-mode-vi C-j select-pane -D
    bind -T copy-mode-vi C-Down select-pane -D
    bind -T copy-mode-vi C-k select-pane -U
    bind -T copy-mode-vi C-Up select-pane -U
    bind -T copy-mode-vi C-l select-pane -R
    bind -T copy-mode-vi C-Right select-pane -R
    # bind -T copy-mode-vi C-\ select-pane -l

# # smart pane switching with awareness of vim splits
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
# # bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"


## A E S T E T H I C S ##

# panes
set -g mode-style fg=colour190

# statusbar
set -g status-position bottom
set -g status-style fg=white,bg=colour234,dim
# hide the session name on bottom left
set -g status-left ''

# show a symbol when the prefix key is active on bottom right and other symbols for Zoomed, Linked status
set -g status-right '#{?client_prefix,#[reverse] Î” #[noreverse],}#{?pane_synchronized,#[reverse] L #[noreverse],}#{?window_zoomed_flag,#[reverse] Z #[noreverse],} #{pane_current_command} | #H | #(date +%%H:%%M) '  
# # set -g status-right '#[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M:%S '
# set -g status-right-length 50
# set -g status-left-length 20
# set -g status-interval 1

# messages 
set -g message-style fg=colour255,bg=colour24,bold

# window
setw -g window-status-current-style fg=colour81,bg=colour238,bold
# setw -g window-status-current-fg colour81
# setw -g window-status-current-bg colour238
# setw -g window-status-current-attr bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '

setw -g window-status-style fg=colour138,bg=colour235,none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
setw -g window-status-bell-style fg=colour255,bg=colour1

# visual bell
set-option -g visual-bell off
set-option -g visual-silence off
set-option -g bell-action none

# change style when a window has activity
set-window-option -g monitor-activity on
set-option -gw window-status-activity-style bg=colour24
# but don't notify about it
set-option -g visual-activity off

# modes 
setw -g clock-mode-colour colour135
setw -g mode-style fg=colour196,bg=colour238,bold

